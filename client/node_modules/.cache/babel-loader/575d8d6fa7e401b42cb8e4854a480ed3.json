{"ast":null,"code":"const reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'MEMORIES_FETCH_SUCCESS':\n      return [...action.payload];\n\n    case 'MEMORY_ADD_SUCCESS':\n      return [...state, action.payload.newMemory];\n\n    case 'MEMORY_Edited_SUCCESS':\n      return state.map(memory => {\n        if (memory._id === action.payload._id) {\n          return { ...action.payload,\n            edited: true\n          };\n        }\n\n        return memory;\n      });\n\n    case 'MEMORY_DELETE_SUCCESS':\n      return state.filter(memory => memory._id !== action.payload._id);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/media/ahmed/6636CCEF36CCC173/ALL_Projrcts/milatry_rev/memories/client/src/redux/reducers/memories.js"],"names":["reducer","state","action","type","payload","newMemory","map","memory","_id","edited","filter"],"mappings":"AAAC,MAAMA,OAAO,GAAE,YAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACpC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,wBAAL;AACA,aAAO,CAAC,GAAID,MAAM,CAACE,OAAZ,CAAP;;AACA,SAAK,oBAAL;AACA,aAAO,CAAC,GAAGH,KAAJ,EAAWC,MAAM,CAACE,OAAP,CAAeC,SAA1B,CAAP;;AACA,SAAK,uBAAL;AACA,aAAOJ,KAAK,CAACK,GAAN,CAAUC,MAAM,IAAI;AACvB,YAAIA,MAAM,CAACC,GAAP,KAAeN,MAAM,CAACE,OAAP,CAAeI,GAAlC,EAAuC;AACnC,iBAAO,EACH,GAAGN,MAAM,CAACE,OADP;AAEHK,YAAAA,MAAM,EAAE;AAFL,WAAP;AAIH;;AACD,eAAOF,MAAP;AACH,OARM,CAAP;;AASA,SAAK,uBAAL;AACA,aAAON,KAAK,CAACS,MAAN,CAAaH,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAeN,MAAM,CAACE,OAAP,CAAeI,GAArD,CAAP;;AAGA;AACA,aAAOP,KAAP;AApBJ;AAsBH,CAvBA;;AA2BD,eAAeD,OAAf","sourcesContent":[" const reducer= (state = [], action) => {\n    switch (action.type) {\n        case 'MEMORIES_FETCH_SUCCESS':\n        return [... action.payload];\n        case 'MEMORY_ADD_SUCCESS':\n        return [...state, action.payload.newMemory];\n        case 'MEMORY_Edited_SUCCESS':\n        return state.map(memory => {\n            if (memory._id === action.payload._id) {\n                return {\n                    ...action.payload,\n                    edited: true\n                };\n            }\n            return memory;\n        })\n        case 'MEMORY_DELETE_SUCCESS':\n        return state.filter(memory => memory._id !== action.payload._id);\n\n        \n        default:\n        return state;\n    }\n}\n\n\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}